---
# tasks file for nkp_deploy
- name: Extract MACHINE_TEMPLATE_IMAGE from NODE_IMAGE_URL
  set_fact:
    MACHINE_TEMPLATE_IMAGE: "{{ NODE_IMAGE_URL | regex_search('/([^/]+\\.qcow2)', '\\1') }}"

- name: debug template name
  debug:
    var: MACHINE_TEMPLATE_IMAGE

- name: Extract NKP_VERSION from URL
  set_fact:
    NKP_VERSION: "{{ NKP_LINUX_URL | regex_search('nkp/v(\\d+\\.\\d+\\.\\d+)/', '\\1') }}"

- name: Show extracted version
  debug:
    msg: "Extracted NKP_VERSION is {{ NKP_VERSION }}"

- name: Check if NKP rock image is present
  nutanix.ncp.ntnx_images_info:
    nutanix_host: "{{ NUTANIX_ENDPOINT }}"
    nutanix_username: "{{ NUTANIX_USER }}"
    nutanix_password: "{{ NUTANIX_PASSWORD }}"
    validate_certs: false
    filter:
      name: "{{ MACHINE_TEMPLATE_IMAGE }}"
  register: image_result


- name: Debug image check output
  debug:
    var: image_result


- name: Upload NKP image to PC if not present
  nutanix.ncp.ntnx_images:
    state: "present"
    nutanix_host: "{{ NUTANIX_ENDPOINT }}"
    nutanix_username: "{{ NUTANIX_USER }}"
    nutanix_password: "{{ NUTANIX_PASSWORD }}"
    validate_certs: false
    source_uri: "{{ NODE_IMAGE_URL }}"
    clusters:
      - name: "{{ NUTANIX_PRISM_ELEMENT_CLUSTER_NAME }}"
    name: "{{ MACHINE_TEMPLATE_IMAGE }}"
    desc: "Image uploaded for NKP deploy by Ansible"
    image_type: "DISK_IMAGE"
    wait: true
  when: image_result.response.metadata.length == 0


- name: Check if VM "nkp_bastion" exists
  nutanix.ncp.ntnx_vms_info:
    nutanix_host: "{{ NUTANIX_ENDPOINT }}"
    nutanix_username: "{{ NUTANIX_USER }}"
    nutanix_password: "{{ NUTANIX_PASSWORD }}"
    validate_certs: false
    filter:
      vm_name: "nkp_bastion"
    kind: vm
  register: bootvm_present


- name: Template te cloudinit file
  ansible.builtin.template:
    src: templates/cloud_init.yml.j2
    dest: ./cloud_init.yml


- name: Create Bastion VM if not present
  nutanix.ncp.ntnx_vms:
    state: present
    name: "nkp_bastion"
    timezone: "UTC"
    nutanix_host: "{{ NUTANIX_ENDPOINT }}"
    nutanix_username: "{{ NUTANIX_USER }}"
    nutanix_password: "{{ NUTANIX_PASSWORD }}"
    validate_certs: false
    cluster:
      name: "{{ NUTANIX_PRISM_ELEMENT_CLUSTER_NAME }}"
    networks:
      - is_connected: true
        subnet:
          name: "{{ NUTANIX_SUBNET_NAME }}"
    disks:
      - type: "DISK"
        size_gb: 20
        clone_image:
          name: "{{ MACHINE_TEMPLATE_IMAGE }}"
        bus: "SCSI"
    vcpus: 4
    cores_per_vcpu: 1
    memory_gb: 8
    guest_customization:
      type: "cloud_init"
      script_path: "./cloud_init.yml"
      is_overridable: true
  register: bootvm_out
  when: bootvm_present.response.metadata.length == 0


- name: Extract Bastion VM IP address
  set_fact:
    bootvm_ip: "{{ bootvm_out.response.spec.resources.nic_list[0].ip_endpoint_list[0].ip }}"
  when: bootvm_out.changed

#- name: Add new Bastion VM to inventory.ini
#  ansible.builtin.lineinfile:
#    path: "inventory.ini"
#    line: "nkp_bastion ansible_host={{ bootvm_ip }} ansible_ssh_common_args='-o StrictHostKeyChecking=no' ansible_user=nutanix"
#    insertafter: "[nkp_boot]"
#    create: yes

- name: Add new Bastion VM to in-memory inventory
  ansible.builtin.add_host:
    name: nkp_bastion
    groups: nkp_boot
    ansible_host: "{{ bootvm_ip }}"
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
    ansible_user: nutanix

- name: Refresh inventory
  ansible.builtin.meta: refresh_inventory

# NKP Deploy - Second Module
- name: Wait for Bastion VM to be ready
  ansible.builtin.pause:
    seconds: 30
  delegate_to: "{{ item }}"
  loop: "{{ groups['nkp_boot'] }}"

- name: Download and extract NKP binary
  ansible.builtin.shell: "curl -fsSL '{{ NKP_LINUX_URL }}' | tar xz -C /usr/local/bin -- nkp"
  become: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['nkp_boot'] }}"

- name: Check if NKP is installed
  ansible.builtin.command: nkp version
  register: nkp_version_output
  ignore_errors: true
  changed_when: false
  delegate_to: "{{ item }}"
  loop: "{{ groups['nkp_boot'] }}"

- name: Extract URL without http or https
  set_fact:
    clean_mirror_registry_url: "{{ MIRROR_REGISTRY_URL | regex_replace('^https?://', '') }}"

- name: Launch NKP cluster create (for unauthenticated registries)
  ansible.builtin.shell: |
    export NUTANIX_USER={{ NUTANIX_USER }}
    export NUTANIX_PASSWORD={{ NUTANIX_PASSWORD }}
    nkp create cluster nutanix -c {{ CLUSTER_NAME }} \
      --kind-cluster-image {{ clean_mirror_registry_url }}/mesosphere/konvoy-bootstrap:v{{ NKP_VERSION }}\
      --endpoint https://{{ NUTANIX_ENDPOINT }}:{{ NUTANIX_PORT }} \
      --insecure \
      --kubernetes-service-load-balancer-ip-range {{ LB_IP_RANGE }} \
      --control-plane-endpoint-ip {{ CONTROL_PLANE_ENDPOINT_IP }} \
      --control-plane-vm-image {{ MACHINE_TEMPLATE_IMAGE }} \
      --control-plane-prism-element-cluster {{ NUTANIX_PRISM_ELEMENT_CLUSTER_NAME }} \
      --control-plane-subnets {{ NUTANIX_SUBNET_NAME }} \
      --control-plane-replicas {{ CP_REPLICAS }} \
      --worker-vm-image {{ MACHINE_TEMPLATE_IMAGE }} \
      --worker-prism-element-cluster {{ NUTANIX_PRISM_ELEMENT_CLUSTER_NAME }} \
      --worker-subnets {{ NUTANIX_SUBNET_NAME }} \
      --worker-replicas {{ WORKER_REPLICAS }} \
      --csi-storage-container {{ NUTANIX_STORAGE_CONTAINER_NAME }} \
      --registry-mirror-url {{ MIRROR_REGISTRY_URL }} \
      --control-plane-memory {{ CP_MEMORY }} \
      --control-plane-vcpus {{ CP_VCPU }} \
      --worker-memory {{ WORKER_MEMORY }} \
      --worker-vcpus {{ WORKER_VCPU }} \
      --self-managed
  async: 3600
  poll: 10
  register: nkp_output
  delegate_to: "{{ item }}"
  loop: "{{ groups['nkp_boot'] }}"
  when: (DOCKER_USERNAME | default('') == '') and (DOCKER_PASSWORD | default('') == '')


- name: Launch NKP cluster create (for authenticated registries)
  ansible.builtin.shell: |
    export NUTANIX_USER={{ NUTANIX_USER }}
    export NUTANIX_PASSWORD={{ NUTANIX_PASSWORD }}
    nkp create cluster nutanix -c {{ CLUSTER_NAME }} \
      --kind-cluster-image {{ clean_mirror_registry_url }}/mesosphere/konvoy-bootstrap:v{{ NKP_VERSION }}\
      --endpoint https://{{ NUTANIX_ENDPOINT }}:{{ NUTANIX_PORT }} \
      --insecure \
      --kubernetes-service-load-balancer-ip-range {{ LB_IP_RANGE }} \
      --control-plane-endpoint-ip {{ CONTROL_PLANE_ENDPOINT_IP }} \
      --control-plane-vm-image {{ MACHINE_TEMPLATE_IMAGE }} \
      --control-plane-prism-element-cluster {{ NUTANIX_PRISM_ELEMENT_CLUSTER_NAME }} \
      --control-plane-subnets {{ NUTANIX_SUBNET_NAME }} \
      --control-plane-replicas {{ CP_REPLICAS }} \
      --worker-vm-image {{ MACHINE_TEMPLATE_IMAGE }} \
      --worker-prism-element-cluster {{ NUTANIX_PRISM_ELEMENT_CLUSTER_NAME }} \
      --worker-subnets {{ NUTANIX_SUBNET_NAME }} \
      --worker-replicas 2 \
      --csi-storage-container {{ NUTANIX_STORAGE_CONTAINER_NAME }} \
      --registry-mirror-url {{ MIRROR_REGISTRY_URL }} \
      --registry-mirror-username {{ DOCKER_USERNAME }} \
      --registry-mirror-password {{ DOCKER_PASSWORD }} \
      --control-plane-memory {{ CP_MEMORY }} \
      --control-plane-vcpus {{ CP_VCPU }} \
      --worker-memory {{ WORKER_MEMORY }} \
      --worker-vcpus {{ WORKER_VCPU }} \
      --self-managed
  async: 3600
  poll: 10
  register: nkp_output
  delegate_to: "{{ item }}"
  loop: "{{ groups['nkp_boot'] }}"
  when: (DOCKER_USERNAME | default('') != '') and (DOCKER_PASSWORD | default('') != '')


- name: Display NKP cluster creation output
  debug:
    var: nkp_output
  delegate_to: "{{ item }}"
  loop: "{{ groups['nkp_boot'] }}"

- name: Retrieve NKP dashboard information
  ansible.builtin.command: "nkp get dashboard --kubeconfig=./{{ CLUSTER_NAME }}.conf"
  register: dashboard_output
  changed_when: false
  delegate_to: "{{ item }}"
  loop: "{{ groups['nkp_boot'] }}"

- name: Display NKP dashboard output
  ansible.builtin.debug:
    var: dashboard_output.results[0].stdout_lines
